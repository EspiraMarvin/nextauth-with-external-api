import Head from "next/head"
import Layout from "../layout/layout"
import Link from "next/link"
import styles from "../styles/Form.module.css"
import { HiAtSymbol, HiFingerPrint, HiOutlineUser } from "react-icons/hi"
import { useState } from "react"
import { useForm } from "react-hook-form"
import { router } from "next/router"
import axios from "axios"

export default function Register() {
  const [show, setShow] = useState({ password: false, cpassword: false })

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm()

  let pwdWatch = watch("password")
  let cPwdWatch = watch("cpassword")
  let cPasswordError,
    pwdLengthError = null

  if (pwdWatch && pwdWatch.length < 6) {
    pwdLengthError = "Passwords should be greater than 5 characters"
  } else if (cPwdWatch !== pwdWatch) {
    cPasswordError = "Passwords does not match"
  }

  const onSubmit = async ({ username, email, password }) => {
    if (password.length < 6) return
    if (password !== cPwdWatch) return
    console.log(username, email, password)
    const data = { email, password }

    const config = {
      method: "POST",
      headers: { "Content-Type": "application-json" },
      body: JSON.stringify(data),
    }

    await axios
      .post("http://localhost:5000/api/auth/register", data)
      .then((res) => {
        console.log("rress", res)
        if (data) router.push("/")
      })
      .catch((error) =>
        console.log("error at reg", error.response.data.message)
      )
  }
  return (
    <Layout>
      <Head>
        <title>Register</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section className="w-3/4 mx-auto flex flex-col gap-10">
        <div className="title">
          <h1 className="text-gray-800 text-4xl font-bold py-4">Register</h1>
          <p className="w-4/4 mx-auto text-gray-400 text-sm">
            To keep up to date with the latest events around you.
          </p>
        </div>

        {/* form */}
        <form className="flex flex-col gap-5" onSubmit={handleSubmit(onSubmit)}>
          <div
            className={`${styles.inputgroup} ${
              errors.username && "border-red-500"
            }`}
          >
            <input
              className={styles.inputtext}
              type="text"
              placeholder="Username"
              {...register("username", { required: true })}
            />
            <span className="icon flex items-center px-4">
              <HiOutlineUser size={23} />
            </span>
          </div>

          <div
            className={`${styles.inputgroup} ${
              errors.email && "border-red-500"
            }`}
          >
            <input
              className={styles.inputtext}
              type="email"
              placeholder="Email"
              {...register("email", { required: true })}
            />
            <span className="icon flex items-center px-4">
              <HiAtSymbol size={23} />
            </span>
          </div>

          <div
            className={`${styles.inputgroup} ${
              errors.password && "border-red-500"
            }`}
          >
            <input
              className={styles.inputtext}
              type={show.password ? "text" : "password"}
              placeholder="Password"
              {...register("password", { required: true })}
            />
            <span
              className="icon flex items-center px-4 cursor-pointer hover:text-[#6366f1]"
              onClick={() => setShow({ ...show, password: !show.password })}
            >
              <HiFingerPrint size={23} />
            </span>
          </div>
          {errors.password && (
            <p className={styles.inputRegFormError}>
              Enter a password between 6 and 60 characters.
            </p>
          )}
          {pwdLengthError && (
            <p className={styles.inputRegFormError}>{pwdLengthError}</p>
          )}

          <div
            className={`${styles.inputgroup} ${
              cPasswordError && "border-red-500"
            }`}
          >
            <input
              className={styles.inputtext}
              type={show.cpassword ? "text" : "password"}
              placeholder="Confirm Password"
              {...register("cpassword", { required: true })}
            />
            <span
              className="icon flex items-center px-4 cursor-pointer hover:text-[#6366f1]"
              onClick={() => setShow({ ...show, cpassword: !show.cpassword })}
            >
              <HiFingerPrint size={23} />
            </span>
          </div>
          {cPasswordError && (
            <p className={styles.inputRegFormError}>{cPasswordError}</p>
          )}

          {/* login buttons */}
          <div className="input-button">
            <button className={styles.button} type="submit">
              Register
            </button>
          </div>
        </form>

        {/* button */}
        <p className="text-center text-gray-400 ">
          Have an account?{" "}
          <Link href={"/login"}>
            <a className="text-blue-700">Sign In</a>
          </Link>
        </p>
      </section>
    </Layout>
  )
}
